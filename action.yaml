name: 'Docker composite action'
description: 'A composite action to handle building a Docker image'
  
inputs:
  namespace:          # drone | bin | gcs ...
    required: true
    description: 'The module namespace'
#   conan:
#     required: false
#     description: 'Whether the image contains a conan package or not'
#     default: false
  platforms:
    required: true
    description: 'The architucture to build the image for'
#     default: linux/amd64,linux/arm64
  registry:
    required: true
    description: 'The registry URL'
  username:
    required: true
    description: 'The registry user name'
  password:
    required: true
    description: 'The registry password'
#   qemu-image:
#     required: false
#     description: 'qemu image to use'
# #     default: tonistiigi/binfmt:latest
  image:
    required: true
    description: 'The image name'
    default: ${{ github.event.repository.name }}
  new-tag:
    required: true
    description: 'The new tag to push'
  dockerfile:
    required: true
    description: 'The dockerfile to build'
    default: ./Dockerfile
  branch:                           # DEPRECATED
    required: false
    description: 'The repo branch'
    default: ${{ github.ref_name }} 
  previous-light-tag:
    required: false
    description: 'previous lightweight tag'
  build-args:
    required: false
    description: 'docker build arguments'
  package-folder:
    required: true
    description: 'Path to package.json / setup.py / conanfile.py / Chart.yaml'
    default: './'
  secrets:
    required: false
    description: 'secrets to pass to docker'
  no-cache:
    description: "Do not use cache when building the image"
    required: false
    default: 'false'
    
outputs:
  image:
    description: 'The name and tag of the new image'
    value: ${{ inputs.image }}:${{ inputs.new-tag }}
  url:
    description: 'The URL of the new image'
    value: ${{ inputs.registry }}/reg/${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.new-tag }}
  digest:
    description: 'The digest of the new image'
    value: ${{ steps.build.outputs.digest }}
  command:
    value: docker pull ${{ inputs.registry }}/reg/${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.new-tag }}
  
runs:
    using: "composite"
    steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           persist-credentials: false

      - name: Override version in package.json / setup.py / conanfile.py / Chart.yaml
#         if: ${{ inputs.conan == 'true' }}
        uses: teveltech/version-action@no-fail
        with:
          new_version: ${{ inputs.new-tag }}
          file_path: ${{ inputs.package-folder }}
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
        with:
#           image: ${{ inputs.qemu-image }}
          image: ${{ inputs.registry }}/reg/base/tonistiigi/binfmt:latest
          platforms: all
          
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2.4.1
        
      - name: Configure docker buildx
        uses: teveltech/buildx-action@master
          
      - name: Login to Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.username }} 
          password: ${{ inputs.password }}
          
      - name: Build
        id: build
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.platforms }}
          pull: true
          push: true
          tags: |
            ${{ inputs.registry }}/reg/${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.new-tag }}
            ${{ inputs.registry }}/reg/${{ inputs.namespace }}/${{ inputs.image }}:${{ github.ref_name }} 
          cache-from: type=registry,ref=${{ inputs.registry }}/reg/${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.previous-light-tag }}
          cache-to: type=inline
          build-args: ${{ inputs.build-args }}
          secrets: ${{ inputs.secrets }}
          no-cache: ${{ inputs.no-cache }}
        
      - name: Add to summary
        id: summary
        shell: bash
        run: |
          echo '##### Docker image:' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo 'docker pull jfrog.local:8081/reg/${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.new-tag }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY